generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  User                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Entry {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  referralCode String    @unique
  source       String
  type         EntryType @default(JOINED)
  username     String?
  firstName    String?
  lastName     String?
  phone        String?
  metadata     Json?
  referrerId   Int?
  waitlistId   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  Entry        Entry?    @relation("EntryToEntry", fields: [referrerId], references: [id])
  other_Entry  Entry[]   @relation("EntryToEntry")
  Waitlist     Waitlist  @relation(fields: [waitlistId], references: [id])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String     @id
  name               String?
  email              String?    @unique
  emailVerified      DateTime?
  image              String?
  selectedWaitlistId String?
  Account            Account[]
  Session            Session[]
  Waitlist           Waitlist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Waitlist {
  id           String        @id
  name         String
  description  String?
  websiteURL   String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  refId        String?       @unique
  userId       String
  Entry        Entry[]
  User         User          @relation(fields: [userId], references: [id])
  WaitlistForm WaitlistForm?
}

model WaitlistForm {
  id          String   @id
  buttonStyle Json?
  inputStyle  Json?
  label       String?
  placeholder String?
  buttonText  String?
  waitlistId  String   @unique
  Waitlist    Waitlist @relation(fields: [waitlistId], references: [id])
}

enum EntryType {
  JOINED
  INVITED
}
